[30.06.2025] This update introduces several moderate changes (see below) and includes a new tutorial: "A tool for generating reference pairwise comparisons for benchmarking interactive methods."
- Framework: From now on, the library is additionally available as a Jar, which can be downloaded from the project's home page (only the most recent versions will be kept on the server).
- Framework: From now on, the sources of the tutorials can be viewed and examined on the project's home page.
- Framework: From now on, the library version number includes the date associated with the push to the repository (e.g., 1.04.30.06.2025; i.e., the last three elements represent the day, month, and year).
- A new tutorial: "Tutorial 12: A tool for generating reference pairwise comparisons for benchmarking interactive methods," was added.
- Polyrun library added as a part of this project.
- IMPORTANT: Experimentation: names (getFileSuffix) of several Excel-based results analyzers (e.g., io.cross.excel.FinalStatisticsXLSX) changed (see the source codes).
- Experimentation: io.cross.excel: A few new analyzers added: GenerationRankerXLS (or XLSX) and GenerationStatisticsXLS (or XLSX). They perform similarly to their "Final..." counterparts but concern presenting results attained by the examined methods at specified generations.
- Experimentation: Results analyzers in io.cross: Minor update in processing; the implementations were exhaustively creating new cell styles (CellStyle), even when the styles for different cells were supposed to be the same. It ultimately led to errors when parsing large input data sets. This bug is now fixed.
- DecisionSupport: system.AbstractReport: changes _processingTime from long to double to introduce more precision.
- DecisionSupport: relation.PO: This class represents a relation of potential optimality, and it introduces some basic functionalities.
- DecisionSupport: model.constructor.abstractConstructor.getReport() changed into instantiateReport().
- DecisionSupport: model.constructor.value.rs.ers: Minor tweaks. E.g. ERS now measures after how many iterations a desired number of compatible models has been found.
- Utils: statistics: a few new statistics added (e.g., MinInRange).

[03.06.2025] This update is mainly dedicated to the "Tutorial 11: Minor update on random number generators" tutorial document
- Tutorials: t11_20.t11_rgns tutorial added.
- Visualization: Axes' titles now can be changed after instantiation
- Visualization: DSFactory2D and 3D: the method for constructing data set can now be supplied with data set and painter params container adjusters, which allow for adjusting the objects being built during initialization
- Visualization: scheme.AbstractScheme.getInstance() method removed (getClone() is now supported only)
- Visualization: GridPlots: This wrapper is now founded on GridBagLayout instead of GridLayout; when instantiating, an implementation of its inner IConstraintsAdjuster interface can be passed via constructor to suitably adjust the layout (e.g., the relative spacing of plots; see the JavaDoc)
- Utils: random.MersenneTwister64: 32 bit version was used instead of 64, corrected
- Utils: random.IRandom: implementations now have the possibility to deploy streams, or advanced versions of the class instance (which may be helpful when parallelizing computations)
- Utils: utils.ArrayUtils class added (the initial version allows for concise creation of arrays ([]))
- Experimentation: container.global.initializers.IRandomNumberGeneratorInitializer: new implementation called FromStreamsInitializer is added; new implementation called DefaultRandomNumberGeneratorInitializer: the class now can be parameterized to deploy RNGs of a desired type
- Experimentation: container.global.initializers.IRandomNumberGeneratorInitializer: new implementation called FromStreamsInitializer is added; new implementation called FromStreamsInitializer is added; it allows for pre-constructing RNG streams, which are then suitably associated with the trials being processed (the constructed RNGs must be splittable or jumpable, see the implementation details)
- Experimentation: minor factorization related to exception throwing/handling
- EvolutionaryComputation: reproduction.operators: Simple generic interfaces for operators are added: ICrossover<T> and IMutate<T> (also, IWeightsReproducer)

[30.04.2025] This update is mainly dedicated to the "ge" tutorial document
- Visualization: line width property can be set via a scheme for 3D components Cube, Axes, and Panes (seek suitable fields, e.g., PANE3D_TOP_LINES_WIDTH).
- Visualization: plot.plotModel.requestScreenshotCreation(...):  option (parameter) for clipping the created screenshot is added; the screenshot is clipped so that its depicted object occupies all the image; it is done by removing the first/last columns/rows whose all pixels match the given color.
- Visualization: minor fixes linked to arrow rendering
- Visualization: Plot3D.getModel(): auxiliary method for adjusting plot projection added (updateProjectionTranslation, updateCameraRotation, updatePlotrRotation)
- EvolutionaryComputation: New Evolutionary Rejection Sampling (ERS) method added (see the tutorial)
- EvolutionaryComputation: visualization.utils.getFlat2DPF (and similar) methods added (construct flat, normalized reference Pareto fronts).
- EvolutionaryComputation: problem.moo.ReferencePointsFactory: getUniformRandomRPsOnConcaveSphere(...) method (and similar) added; they allow for constructing reference points that are sampled uniformly on convex/concave spheres
- EvolutionaryComputation: reproduction.operators.crossover.OnSimplexCombination and reproduction.operators.mutation.OnSimplexMutation added
- EvolutionaryComputation: ObjectiveSpaceManager gained a mode: _deriveNadirFromVectorsFormingUtopia (nadir is built from objective vectors forming the utopia)
- EvolutionaryComputation: utils.GenerationsLimits: an auxiliary class that allows for concisely determining generations limits for various problems is added
- EvolutionaryComputation: utils.ReferencePointsOnParetoFront: an auxiliary class that allows for concisely creating and wrapping Pareto optimal reference points (generated randomly)
- EvolutionaryComputation: interactive: the primary algorithm classes (e.g., IEMOD) were extended with new static methods for instantiating the algorithms.
- EvolutionaryComputation: the primary algorithm classes (e.g., NSGA-II, IEMO/D, etc.): now the methods are instantiated with a fixed ObjectiveSpaceManager if they are to run without dynamically updating the OS bounds (previously, the manager was set to null); the manager will not be instantiated if the MOO problem and its utopia and nadir points are not delivered
- Utils: statistics.Min/Max/Mean/StandardDeviationIgnoreNegatives added
- Experimentation: tools.LatexTableFromXLSX: cell pre and postprocessing option added
- Experimentation: io.scenario: TrialsResultsXLSX summarizer added; it fills data matrix by explicitly copying results from the trial level without performing the summary (the resulting matrices are of generations x trials size; per indicator)
- DecisionSupport: model.similarity.ISimilarity added (concept of similarity between internal models is added along with example implementations)
- DecisionSupport: model.constructor.value.rs.ers.ERS added (Evolutionary Rejection Sampling)
- DecisionSupport: model.constructor.value.rs.ers.ERS and ..frs.FRS: both extend AbstractRejectionSampling class
- DecisionSupport: model.constructor.value.rs.ers.ERS and ..frs.FRS: iterations limit of both can be flexibly adjusted by implementing IIterationLimit and providing via Params container

[18.03.2025] Moderate changes. Some of them are described in "Tutorial 9: Facilitating the usage"
- Experimentation: Experimentation: container.global.initializers.IRandomNumberGeneratorInitializer: The method's signature changed. Now, it comprises data on the calling scenario and trial. This way, a non-colliding seed may be derived without using the counter (based on the scenario ID, trial ID, and the total number of trials; see the DefaultRandomNumberGeneratorInitializer class), and it will be calculated as if no scenario/trial was disabled. Disabling, e.g., trials, would make RNGs be appointed seeds that are "flushed to the left" in the previous approach. Hence, repeating the execution of selected trials would generate colliding seeds across multiple executions of the experiment executor. Now, this issue will not arise unless the top-level fields, such as scenario definitions, are altered (it is preferred to use scenario/trial disabling conditions to adjust the experimental setup).
- Visualization: color.palette: classes related to modeling color palettes are introduced. They will be further
developed in the future.
- Visualization: updater.DataPointsProcessor is added. It works similarly to the regular DataProcessor class, but
allows performing per-points (data points) manipulations via an auxiliary object implementing a dedicated interface
(see the class description)
- Visualization: drmanager.DRMPFactory class added (display ranges manager params factory). It provides various static methods for initializing the params container for the display ranges manager.
- Visualization: plot.Plot2DFactory, PCP2DFactory, Heatmap2DFactory, Heatmap3DFactory classes added. They support quickly initializing the plot objects.
- EvolutionaryComputation: reproduction.valuecheck.IValueCheck, reproduction.operators.crossover.ICrossover, reproduction.operators.mutation.IMutate return types of the interface methods changed from void to their corresponding input types (e.g., input = int, return = int), and it is assumed that the returned objects are the input vectors. This change allows for combining the execution of different operators (nested method calls).
- EvolutionaryComputation: phases.PhasesBundle.copyPhasesFromBundleToEA: changed signature (order of inputs changed).
- EvolutionaryComputation: population.Specimen: setters for decision vectors were removed.
- EvolutionaryComputation: emo.aposteriori: the default "_updateUtopiaUsingIncumbent" flags were switched to false.
- EvolutionaryComputation: visualization.utils.ReferenceParetoFront added. This class provides means for instantiating data sets (for the visualization) portraying some common Pareto fronts. This class will be further developed in the future.
- EvolutionaryComputation: phase.DoubleConstruct, DoubleEvaluate, reproduction.DoubleReproduce (similarly to Double: Int, Bool, and Chromosome. These are new implementations of the IConstruct, IEvaluate, and IReproduce interfaces. They delegate the individual, i.e., per-specimen tasks (i.e., evaluate a specimen), to auxiliary objects implementing straightforward interfaces (inner interfaces). These auxiliary objects can be supplied when instantiating the DoubleConstruct, etc., to allow quick definition (inline) of the process (e.g., evaluation rules).
- EvolutionaryComputation: emo.aposteriori and interactive: the primary algorithm classes (e.g., NSGA) were extended with new static methods for instantiating the methods.
- EvolutionaryComputation: emo.aposteriori and interactive: the primary algorithm classes (e.g., NSGA): the default parents selection policy was unified and set to Random.
- Utils: a simple utils.The MathUtils class has been added and will be developed in the future. The intention is to use the framework's implementations of mathematical functions, thus minimizing the use of external libraries (e.g., Commons Math).

[03.03.2025]
- Tutorials: minor changes in t1_t20_t1.experimentation_module.t2_knapsack_example
- EvolutionaryComputation: problem.moo.MOOProblemBundle: Default instantiable class added
- EvolutionaryComputation: problem.ProblemBundle: Default instantiable class added
- EvolutionaryComputation: problem.moo.AbstractMOOProblemBundle: Another constructor was added. It skips passing optimizationDirections array (it is derived via the criterion object).
- EvolutionaryComputation: problem.AbstractProblemBundle: Another constructor was added. It skips passing optimizationDirections array (it is derived via the criterion object).
- EvolutionaryComputation: init ends phase was occasionally not set by default to phase.InitEnds (default); Corrected.
- EvolutionaryComputation: ea.EA.getPhases() method removed

[27.02.2025]
- EvolutionaryComputation: reproduction.IReproduce: the main method gained "throws PhaseException";
- EvolutionaryComputation: utils.decomposition.moead.MOEADGoalsManager.makeBestAssignments() is decomposed into makeBestAssignments() and updatePopulationAsImposedByAssignments()

[25.02.2025]
- Bug in Visualization module: Data set name was not displayed on a legend for some data sets. Corrected.
- Bug in Visualization module: Parallel coordinate point was not rendering a single data point. Corrected.
- Bug in Visualization.plotswrapper.PlotsWrapperModel#replacePlotWith(int, AbstractPlot, boolean) method: method was incorrectly assigning interaction listeners for Plot3D. Corrected.
- Minor refactorization in EvolutionaryComputation.emo.aposteriori.nsga and nsgaii

[24.02.2025] Minor changes + one critical change in one interface (may result in incompatibilities in own codes)
- EvolutionaryComputation: selection.ISelect interface changed; not the main method's signature is ArrayList<Parents> selectParents(EA ea) (therefore, it is generalized). The concrete implementations now derive suitable parameters from the evolutionary algorithm. Thus, the 'noOffspring' field from Tournament and Random selections is now removed (it is, by default, set as ea.getOffspringSize()).
- Visualization: thread.QueueingSystem class added (wrapper)
- Visualization: BlockTypes (Execution) switched to Enum
- Visualization: Minor refactorization in the Frame class
- Visualization: PlotsWrapperController: Changed _considerOverdueForSwingWorkers to _considerOverdueForExecutionBlocks.
- Utils: PlotsWrapperController, AbstractPlotsWrapper: Changed _considerOverdueForSwingWorkers to _considerOverdueForExecutionBlocks.

[19.02.2025] Minor updates
- Visualization: added a new method that allows replacing a plot that is a member of AbstractPlotsWrapper with a new one; see plotswrapper.PlotsWrapperModel#replacePlotWith(int, AbstractPlot, boolean) method; not that it should be used with caution as it has not be thoroughly tested
- Visualization: Added new plots wrapper: TwoPlotsHorizontallyWithSplit
- Visualization: AbstractPlotWrapper.addPlotRespectingTheLayout method added (to be called by instantiateLayout)
- EvolutionaryComputation: AbstractMOOProblemBundle: selected fields were pushed higher in the class hierarchy
- Utils: Minor updates in swing.swingworkerqueue (disabling/enabling queues, removing execution blocks associated with specified caller ID)

[17.02.2025] Minor updates that are reported in "Tutorial 8: Supportive Tools for the Experimentation module and creating screenshots"
- Experimentation: Added to tools for the Experimentation module: ConvergencePlotFromXLSX and LatexTableFromXLSX;
- Visualization: Added functionality for requesting plot screenshot creation.

[13.01.2025] Minor updates
- Visualization.plot.PlotModel.updateDataSets (the method allows updating only a selected subset of models)
- Visualization.dataset.AbstractDataSet: _legendLabel field added (equals _name by default, but _legendLabel can be adjusted independently; _name field is reserved to processing)
- Visualization 3D: improved font quality

[07.01.2025] Minor updates + drawing arrows in visualization module
- Added a possibility of drawing arrows (see Tutorial 7: Visualization module -- drawing arrows).
- Added a Simplex class in Utils.space.simplex (provides various functionalities related to a normalized simplex plane (vectors whose components are in [0, 1] bounds and sum up to 1.0).
- Added Visualization.AbstractScheme.setAllFontsTo(String fontName) public method.
- Refactorization: Visualization.dataset.DataSet + added new factory-like classes DSFactory2D and DSFactory3D (they will be updated with new methods from now, not DataSet).
- Refactorization: Minor changes in Utils.space.Vector class and its corresponding VectorTest test.
- Refactorization: Utils.space: Minor changes in IDistance and IScalarizingFunction interfaces (methods informing about preference direction are added).
- Refactorization: Similarity in EvolutionaryComputation.emo.utils.decomposition.similarity.ISimilarity: isLessPreferred changed name to isLessMeaningCloser.
- Refactorization: Resigned from private MyProject and Didactics module; switched to just one "Private".
- Refactorization: Minor changes in packages structure of DecisionSupport.model.constructor.value.
- Refactorization: Minor changes in the evolutionary operators (EvolutionaryComputation.reproduction.operators).
- Bug in Experimentation module: (GlobalDataContainer) The number of threads is reduced to 1 (surpasses the original value) when the empty arguments array is provided to ExperimentPerformer.execute(String [] args). Corrected.
- Bug in Experimentation module: CrossSummarizer throws an exception when the crossed-scenario level is > 3. Corrected.
- Bug in Visualization module: Surpassing legend entry sizes was not working properly. Corrected.
- Changelog.txt is added

[10.12.2024] Initial release