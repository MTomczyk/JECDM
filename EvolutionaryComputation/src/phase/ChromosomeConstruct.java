package phase;

import ea.EA;
import exception.PhaseException;
import population.Chromosome;
import population.Specimen;
import random.IRandom;

import java.util.ArrayList;

/**
 * A simple implementation of {@link phase.IConstruct} that delivers a convenient means for instantiating the initial
 * population. It is assumed that the population size equals {@link EA#getPopulationSize()}. This class allows directly
 * instantiating the specimen's {@link Chromosome} via an auxiliary {@link IConstruct} object.
 *
 * @author MTomczyk
 */
final public class ChromosomeConstruct extends AbstractConstruct implements IConstruct
{
    /**
     * Supportive interface for delivering (constructing) initial chromosome for {@link Specimen}
     */
    public interface IConstruct
    {
        /**
         * The main method's signature.
         *
         * @param R random number generator received from the EA
         * @return initial chromosome
         */
        Chromosome create(IRandom R);
    }

    /**
     * Object responsible for creating initial decision vectors.
     */
    private final IConstruct _constructor;

    /**
     * Parameterized constructor.
     *
     * @param constructor object responsible for creating initial decision vectors
     */
    public ChromosomeConstruct(IConstruct constructor)
    {
        _constructor = constructor;
    }

    /**
     * Creates the initial population. This class instantiates specimens' decision vectors as doubles
     * generated by {@link IConstruct}.
     *
     * @param ea evolutionary algorithm
     * @return specimen array
     * @throws PhaseException the exception can be thrown and propagated higher
     */
    @Override
    public ArrayList<Specimen> createInitialPopulation(EA ea) throws PhaseException
    {
        ArrayList<Specimen> S = createSpecimenArray(ea);
        for (Specimen s : S) s.setChromosome(_constructor.create(ea.getR()));
        return S;
    }
}
