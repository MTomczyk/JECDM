package io.scenario;

import exception.ScenarioException;
import executor.ScenariosSummarizer;
import indicator.IIndicator;
import scenario.Scenario;
import statistics.IStatistic;

/**
 * This class is a simple implementation of {@link IScenarioSaver} for creating CSV files to store the scenario-level
 * results. It suitably extends {@link SummarizerTXT}. The files generated have a similar format to the files generated by
 * the parent class. The major difference is the use of a customizable field separator and the alternation of the
 * file extension.
 *
 * @author MTomczyk
 */
public class SummarizerCSV extends SummarizerTXT implements IScenarioSaver
{
    /**
     * Field separator. The dot should not be used as it is a default decimal separator.
     */
    private final Character _separator;

    /**
     * Default constructor.
     *
     * @param separator field separator used; the dot should not be used as it is a default decimal separator
     */
    public SummarizerCSV(Character separator)
    {
        this("", "", null, null, null, null, separator);
    }

    /**
     * Parameterized constructor.
     *
     * @param path       full path to the folder where the file should be stored (without a path separator)
     * @param filename   the filename (without the suffix, e.g., extension)
     * @param scenario   currently processed scenario
     * @param trialIDs   trial IDs
     * @param indicators performance indicators employed when assessing the performance of EAs.
     * @param statistics statistic functions used to aggregate the data
     * @param separator  field separator used; the dot should not be used as it is a default decimal separator
     */
    protected SummarizerCSV(String path, String filename, Scenario scenario, int[] trialIDs, IIndicator[] indicators, IStatistic[] statistics, Character separator)
    {
        super(path, filename, scenario, trialIDs, indicators, statistics);
        _separator = separator;
    }

    /**
     * Creates a new instance of the object. Intended to be used by {@link ScenariosSummarizer} to clone the
     * initial object instance one time per each scenario involved (i.e., one clone will be mapped to one scenario).
     *
     * @param path       full path to the folder where the file should be stored (without a path separator)
     * @param filename   the filename (without the suffix, e.g., extension)
     * @param scenario   scenario being currently processed
     * @param trialIDs   trial IDs
     * @param indicators performance indicators employed when assessing the performance of EAs.
     * @param statistics statistic functions used to aggregate the data
     * @return new object instance
     * @throws ScenarioException the scenario-level exception can be cast 
     */
    @Override
    public IScenarioSaver getInstance(String path, String filename, Scenario scenario, int[] trialIDs, IIndicator[] indicators, IStatistic[] statistics) throws ScenarioException
    {
        return new SummarizerCSV(path, filename, scenario, trialIDs, indicators, statistics, _separator);
    }

    /**
     * The method is overwritten to alter the exception.
     *
     * @throws ScenarioException the scenario-level exception can be thrown  (e.g., then the requested path is invalid)
     */
    @Override
    public void create() throws ScenarioException
    {
        try
        {
            super.create();
        } catch (ScenarioException e)
        {
            throw new ScenarioException(e.getMessage(), this.getClass(), e, _scenario);
        }
    }

    /**
     * The method is overwritten to alter the exception.
     *
     * @throws ScenarioException scenario-level exception can be thrown
     */
    @Override
    public void close() throws ScenarioException
    {
        try
        {
            super.close();
        } catch (ScenarioException e)
        {
            throw new ScenarioException(e.getMessage(), this.getClass(), e, _scenario);
        }
    }


    /**
     * This extension adds the header lines to the chunk (indicator and statist functions' names).
     *
     * @param indicator   indicator
     * @param generations number of generations
     * @throws ScenarioException scenario-level exception can be thrown
     */
    @Override
    public void notifyIndicatorProcessingBegins(IIndicator indicator, int generations) throws ScenarioException
    {
        _currentIndicator = indicator;
        _expectedNumberOfGenerations = generations;

        _writer.print(indicator.getName());
        _writer.println(_separator);

        for (IStatistic statistic : _statistics)
        {
            _writer.print(statistic.getName());
            _writer.print(_separator);
        }

        _writer.println();
        _writer.print(generations);
        _writer.println(_separator);
        _writer.flush();
    }

    /**
     * Writes the statistics values.
     *
     * @param trialResults raw trial results
     * @param statistics   statistics calculated from trial results (1:1 mapping with statistic objects stored in {@link container.scenario.AbstractScenarioDataContainer})
     * @param generation   current generation number
     * @throws ScenarioException scenario-level exception can be thrown
     */
    @Override
    public void pushData(double[] trialResults, double[] statistics, int generation) throws ScenarioException
    {
        StringBuilder s = new StringBuilder();
        for (double statistic : statistics)
        {
            s.append(String.valueOf(statistic).replace(',', '.'));
            s.append(_separator);
        }
        _writer.println(s);
        _writer.flush();
    }


    /**
     * Returns the file suffix (includes .csv)
     *
     * @return file suffix
     */
    @Override
    public String getFileSuffix()
    {
        return ".csv";
    }


}
