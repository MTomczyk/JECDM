package tools.feedbackgenerators;

import alternative.Alternative;
import random.IRandom;
import scenario.Scenario;

import java.util.ArrayList;

/**
 * Alternatives provider that samples them from a specified shape.
 *
 * @author MTomczyk
 */
public class FromShapeProvider extends DimensionsDependent implements IAlternativesProvider
{
    /**
     * Auxiliary interface for classes responsible for providing alternatives' evaluations (sampling from a shape).
     */
    public interface IShape
    {
        /**
         * The main method.
         *
         * @param scenario scenario definition
         * @param n        the number of alternatives to sample
         * @param m        the number of criteria/objectives
         * @param R        random number generator
         * @return alternatives' evaluations
         */
        double[][] getEvaluations(Scenario scenario, int n, int m, IRandom R);
    }

    /**
     * Auxiliary interface for objects responsible for rescaling evaluation points generated by {@link IShape}.
     */
    public interface IRescaler
    {
        /**
         * The main method for rescaling the points.
         *
         * @param scenario       scenario being currently processed
         * @param interaction    interaction number (0 = the first interaction conducted, 1 = the second, etc.).
         * @param noInteractions total number of interactions
         * @param e              evaluation matrix (alternative x dimensions)
         */
        void rescale(Scenario scenario, int interaction, int noInteractions, double[][] e);
    }


    /**
     * Parameterized constructor.
     *
     * @param dimensionsKey  key associated with the number of criteria/objectives
     * @param noAlternatives no alternatives per interaction
     * @param shape          auxiliary object responsible for providing alternatives' evaluations (sampling from a shape)
     * @param rescaler       auxiliary object responsible for rescaling evaluation points generated by {@link IShape}.
     */
    public FromShapeProvider(String dimensionsKey, int noAlternatives, IShape shape, IRescaler rescaler)
    {
        super(dimensionsKey);
        _noAlternatives = noAlternatives;
        _shape = shape;
        _rescaler = rescaler;
    }


    /**
     * No. reference alternatives per interaction.
     */
    private final int _noAlternatives;

    /**
     * Auxiliary object responsible for providing alternatives' evaluations (sampling from a shape).
     */
    private final IShape _shape;

    /**
     * Auxiliary object responsible for rescaling evaluation points generated by {@link IShape}.
     */
    private final IRescaler _rescaler;

    /**
     * The main method.
     *
     * @param scenario       scenario being currently processed
     * @param noInteractions the expected number of interactions with the DM
     * @param R              random number generator
     * @return alternatives set(s); IMPORTANT: the first dimension refers to different interaction numbers
     * (index of 0 refers to the first interaction, of 1 to the second, etc.); the second dimension represents
     * associated alternatives.
     */
    @Override
    public ArrayList<ArrayList<Alternative>> getAlternatives(Scenario scenario, int noInteractions, IRandom R)
    {
        ArrayList<ArrayList<Alternative>> alternatives = new ArrayList<>(noInteractions);

        for (int i = 0; i < noInteractions; i++)
        {
            ArrayList<Alternative> A = new ArrayList<>(_noAlternatives);
            double[][] e = _shape.getEvaluations(scenario, _noAlternatives, getM(scenario), R);
            _rescaler.rescale(scenario, i, noInteractions, e);
            for (int j = 0; j < _noAlternatives; j++) A.add(new Alternative("A_" + i + "_" + j, e[j]));
            alternatives.add(A);
        }
        return alternatives;
    }
}
