package executor.complex.case2;

/**
 * Provides data for the input (dummy) populations.
 *
 * @author MTomczyk
 */
class InputPopulations
{
    /**
     * Raw data copied from the Excel file (trials = 4; for population size = 3; generations = 10; evaluations = 3; case).
     */
    private static final double[][] _rawDataT4PS3G10E3 =
            {
                    {2.000000000, 3.000000000, 1.000000000, 5.000000000, 3.000000000, 3.000000000, 2.000000000, -1.000000000, 0.841470985, 0.540302306, 1.000000000, 1.000000000, 3.000000000, 10.000000000, -5.000000000, 1.000000000, 2.000000000, 3.000000000, 7.000000000, 8.000000000, 5.000000000, 6.000000000, 8.000000000, 1.000000000, 2.333333333, 0.909297427, 0.960170287, 0.400000000, 20.000000000, 2.400000000, 2.800000000, 0.200000000, 2.000000000, 0.514395259, 0.666366745, 0.454648713},
                    {1.000000000, 1.500000000, 0.250000000, 5.000000000, 3.000000000, 4.000000000, 4.000000000, -2.000000000, 0.909297427, -0.416146837, 4.000000000, 1.414213562, 6.000000000, 5.000000000, -10.000000000, 1.000000000, 2.000000000, 3.000000000, 3.500000000, 2.000000000, 5.000000000, 5.000000000, 9.000000000, 2.000000000, 1.166666667, -0.756802495, 0.843853959, 1.600000000, 5.000000000, 4.800000000, 2.200000000, 0.800000000, 4.000000000, -0.404239154, 0.614300282, -0.378401248},
                    {0.666666667, 1.000000000, 0.111111111, 5.000000000, 3.000000000, 5.000000000, 6.000000000, -3.000000000, 0.141120008, -0.989992497, 9.000000000, 1.732050808, 9.000000000, 3.333333333, -15.000000000, 1.000000000, 2.000000000, 3.000000000, 2.333333333, 0.888888889, 5.000000000, 4.000000000, 10.000000000, 3.000000000, 0.777777778, -0.279415498, 0.660316708, 3.600000000, 2.222222222, 7.200000000, 1.200000000, 1.800000000, 6.000000000, -0.836021862, 0.990059086, -0.139707749},
                    {0.500000000, 0.750000000, 0.062500000, 5.000000000, 3.000000000, 6.000000000, 8.000000000, -4.000000000, -0.756802495, -0.653643621, 16.000000000, 2.000000000, 12.000000000, 2.500000000, -20.000000000, 1.000000000, 2.000000000, 3.000000000, 1.750000000, 0.500000000, 5.000000000, 3.000000000, 11.000000000, 4.000000000, 0.583333333, 0.989358247, 0.424179007, 6.400000000, 1.250000000, 9.600000000, -0.200000000, 3.200000000, 8.000000000, -0.608083010, 0.727035131, 0.494679123},
                    {0.400000000, 0.600000000, 0.040000000, 5.000000000, 3.000000000, 7.000000000, 10.000000000, -5.000000000, -0.958924275, 0.283662185, 25.000000000, 2.236067977, 15.000000000, 2.000000000, -25.000000000, 1.000000000, 2.000000000, 3.000000000, 1.400000000, 0.320000000, 5.000000000, 2.000000000, 12.000000000, 5.000000000, 0.466666667, -0.544021111, 0.154251450, 10.000000000, 0.800000000, 12.000000000, -2.000000000, 5.000000000, 10.000000000, 0.279873351, 0.574400879, -0.272010555},
                    {0.333333333, 0.500000000, 0.027777778, 5.000000000, 3.000000000, 8.000000000, 12.000000000, -6.000000000, -0.279415498, 0.960170287, 36.000000000, 2.449489743, 18.000000000, 1.666666667, -30.000000000, 1.000000000, 2.000000000, 3.000000000, 1.166666667, 0.222222222, 5.000000000, 1.000000000, 13.000000000, 6.000000000, 0.388888889, -0.536572918, -0.127963690, 14.400000000, 0.555555556, 14.400000000, -4.200000000, 7.200000000, 12.000000000, 0.819289219, 0.961216805, -0.268286459},
                    {0.285714286, 0.428571429, 0.020408163, 5.000000000, 3.000000000, 9.000000000, 14.000000000, -7.000000000, 0.656986599, 0.753902254, 49.000000000, 2.645751311, 21.000000000, 1.428571429, -35.000000000, 1.000000000, 2.000000000, 3.000000000, 1.000000000, 0.163265306, 5.000000000, 0.000000000, 14.000000000, 7.000000000, 0.333333333, 0.990607356, -0.399985315, 19.600000000, 0.408163265, 16.800000000, -6.800000000, 9.800000000, 14.000000000, 0.684488799, 0.791836209, 0.495303678},
                    {0.250000000, 0.375000000, 0.015625000, 5.000000000, 3.000000000, 10.000000000, 16.000000000, -8.000000000, 0.989358247, -0.145500034, 64.000000000, 2.828427125, 24.000000000, 1.250000000, -40.000000000, 1.000000000, 2.000000000, 3.000000000, 0.875000000, 0.125000000, 5.000000000, -1.000000000, 15.000000000, 8.000000000, 0.291666667, -0.287903317, -0.640144339, 25.600000000, 0.312500000, 19.200000000, -9.800000000, 12.800000000, 16.000000000, -0.144987198, 0.549226270, -0.143951658},
                    {0.222222222, 0.333333333, 0.012345679, 5.000000000, 3.000000000, 11.000000000, 18.000000000, -9.000000000, 0.412118485, -0.911130262, 81.000000000, 3.000000000, 27.000000000, 1.111111111, -45.000000000, 1.000000000, 2.000000000, 3.000000000, 0.777777778, 0.098765432, 5.000000000, -2.000000000, 16.000000000, 9.000000000, 0.259259259, -0.750987247, -0.829309833, 32.400000000, 0.246913580, 21.600000000, -13.200000000, 16.200000000, 18.000000000, -0.790196929, 0.916274317, -0.375493623},
                    {0.200000000, 0.300000000, 0.010000000, 5.000000000, 3.000000000, 12.000000000, 20.000000000, -10.000000000, -0.544021111, -0.839071529, 100.000000000, 3.162277660, 30.000000000, 1.000000000, -50.000000000, 1.000000000, 2.000000000, 3.000000000, 0.700000000, 0.080000000, 5.000000000, -3.000000000, 17.000000000, 10.000000000, 0.233333333, 0.912945251, -0.952412980, 40.000000000, 0.200000000, 24.000000000, -17.000000000, 20.000000000, 20.000000000, -0.744023079, 0.855634355, 0.456472625},
            };

    /**
     * Constructs solution data from the raw data ( trials = 4; for population size = 3; generations = 10; evaluations = 3; case).
     *
     * @return solution data
     */
    protected static double[][][][] getSolutionDataForT4PS3G10E3()
    {
        // trials // generations // specimens // evaluations
        double[][][][] data = new double[4][10][3][3];
        for (int t = 0; t < 4; t++)
        {
            for (int g = 0; g < 10; g++)
            {
                for (int p = 0; p < 3; p++)
                {
                    for (int e = 0; e < 3; e++)
                    {
                        int column = t * 3 * 3 + p * 3 + e;
                        data[t][g][p][e] = _rawDataT4PS3G10E3[g][column];
                    }
                }
            }
        }
        return data;
    }


    /**
     * Raw data copied from the Excel file (trials = 4; for population size = 2; generations = 5; evaluations = 3; case).
     */
    private static final double[][] _rawDataT4PS2G5E3 =
            {
                    {3.000000000, 7.000000000, 2.000000000, 4.000000000, 2.500000000, 9.000000000, 2.000000000, -3.000000000, 1.540302306, -4.158529015, 3.459697694, 10.000000000, 1.850815718, 1.188395106, -2.000000000, 10.900000000, 2.000000000, 4.000000000, -1.000000000, -2.000000000, -0.416146837, 5.000000000, 15.400000000, 100.000000000,},
                    {1.500000000, 3.500000000, 1.000000000, 1.000000000, 1.250000000, 8.000000000, 4.000000000, -2.000000000, 1.583853163, -4.090702573, 4.416146837, 10.000000000, -2.402997962, 1.099750170, -4.000000000, 10.800000000, 0.250000000, 8.000000000, -2.000000000, -4.000000000, -0.653643621, 5.000000000, 7.700000000, 6.250000000,},
                    {1.000000000, 2.333333333, 0.666666667, 0.444444444, 0.833333333, 7.000000000, 6.000000000, -1.000000000, 2.010007503, -4.858879992, 4.989992497, 10.000000000, -1.010108666, 7.086167396, -6.000000000, 10.700000000, 0.074074074, 12.000000000, -3.000000000, -6.000000000, 0.960170287, 5.000000000, 5.133333333, 1.234567901,},
                    {0.750000000, 1.750000000, 0.500000000, 0.250000000, 0.625000000, 6.000000000, 8.000000000, 0.000000000, 3.346356379, -5.756802495, 4.653643621, 10.000000000, -1.529885656, -1.321348709, -8.000000000, 10.600000000, 0.031250000, 16.000000000, -4.000000000, -8.000000000, -0.145500034, 5.000000000, 3.850000000, 0.390625000,},
                    {0.600000000, 1.400000000, 0.400000000, 0.160000000, 0.500000000, 5.000000000, 10.000000000, 1.000000000, 5.283662185, -5.958924275, 3.716337815, 10.000000000, 3.525320086, -1.042835213, -10.000000000, 10.500000000, 0.016000000, 20.000000000, -5.000000000, -10.000000000, -0.839071529, 5.000000000, 3.080000000, 0.160000000,},
            };


    /**
     * Constructs solution data from the raw data ( trials = 4; for population size = 2; generations = 5; evaluations = 3; case).
     *
     * @return solution data
     */
    protected static double[][][][] getSolutionDataForT4PS2G5E3()
    {
        // trials // generations // specimens // evaluations
        double[][][][] data = new double[4][5][2][3];
        for (int t = 0; t < 4; t++)
        {
            for (int g = 0; g < 5; g++)
            {
                for (int p = 0; p < 2; p++)
                {
                    for (int e = 0; e < 3; e++)
                    {
                        int column = t * 6 + p * 3 + e;
                        data[t][g][p][e] = _rawDataT4PS2G5E3[g][column];
                    }
                }
            }
        }
        return data;
    }
}
