package y2025.ERS.e3_samplers.results;

import alternative.Alternative;
import color.Color;
import color.gradient.ColorPalettes;
import criterion.Criteria;
import dataset.DSFactory3D;
import dataset.IDataSet;
import dataset.painter.style.MarkerStyle;
import dataset.painter.style.enums.Marker;
import decisionsupport.ERSFactory;
import decisionsupport.operators.LNormOnSimplex;
import dmcontext.DMContext;
import drmanager.DRMPFactory;
import frame.Frame;
import history.PreferenceInformationWrapper;
import io.FileUtils;
import io.image.ImageSaver;
import model.IPreferenceModel;
import model.constructor.random.LNormGenerator;
import model.constructor.value.rs.ers.ERS;
import model.constructor.value.rs.ers.Report;
import model.constructor.value.rs.ers.evolutionary.Tournament;
import model.constructor.value.rs.iterationslimit.Constant;
import model.constructor.value.rs.frs.FRS;
import model.internals.value.scalarizing.LNorm;
import plot.Plot3D;
import plot.Plot3DFactory;
import preference.indirect.PairwiseComparison;
import print.PrintUtils;
import y2025.ERS.common.PCsDataContainer;
import random.IRandom;
import random.MersenneTwister64;
import scheme.WhiteScheme;
import scheme.enums.ColorFields;
import space.normalization.builder.StandardLinearBuilder;
import utils.Screenshot;
import visualization.utils.ReferenceParetoFront;
import y2025.ERS.e1_auxiliary.GeneratePCsData;

import java.io.File;
import java.nio.file.Path;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.LinkedList;

/**
 * This script generates and saves (screenshots) example models generated by ERS during a series of 5 interactions.
 *
 * @author MTomczyk
 */
public class IllustrateModels
{
    /**
     * Runs the script.
     *
     * @param args not used
     */
    @SuppressWarnings({"ConstantValue", "DuplicatedCode"})
    public static void main(String[] args)
    {
        // Load pairwise comparisons data.
        try
        {
            Path path = FileUtils.getPathRelatedToClass(GeneratePCsData.class, "Projects", "src", File.separatorChar);
            String fp = path.toString() + File.separatorChar + "pcs.txt";
            PCsDataContainer PCs = new PCsDataContainer(fp, 4, 3, 100, 10);

            int scenario = 0;
            double[] alphas = new double[]{1.0d, 1.0d, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY};
            int[] alphaIDX = new int[]{0, 0, 2, 2};
            int[] t = new int[]{33, 33, 8, 8};
            boolean[] useERS = new boolean[]{false, true, false, true};

            String[] saveFilename = new String[]{
                    "FRS_models_1",
                    "ERS_models_1",
                    "FRS_models_infty",
                    "ERS_models_infty",
            };

            float[][][] translation = new float[][][]
                    {
                            {
                                    {-0.03750f, 0.00000f, 1.76250f},
                                    {-0.03750f, 0.00000f, 1.76250f},
                                    {0.02873f, 0.24512f, 0.34716f},
                                    {0.03523f, 0.24067f, 0.27098f}
                            },
                            {
                                    {-0.03750f, 0.00000f, 1.76250f},
                                    {-0.03750f, 0.00000f, 1.76250f},
                                    {0.02873f, 0.24512f, 0.34716f},
                                    {0.03523f, 0.24067f, 0.27098f}
                            },
                            {
                                    {-0.03750f, 0.00000f, 1.76250f},
                                    {-0.03750f, 0.00000f, 1.76250f},
                                    {-0.03750f, 0.00000f, 1.76250f},
                                    {0.00401f, 0.11677f, 0.81594f},
                            },
                            {
                                    {-0.03750f, 0.00000f, 1.76250f},
                                    {-0.03750f, 0.00000f, 1.76250f},
                                    {-0.03750f, 0.00000f, 1.76250f},
                                    {0.00401f, 0.11677f, 0.81594f},
                            },
                    };

            float[][][] cameraRotation = new float[][][]
                    {
                            {
                                    {0.00000f, 0.00000f},
                                    {0.00000f, 0.00000f},
                                    {328.27945f, 1.82556f},
                                    {332.22107f, 1.64300f}
                            },
                            {
                                    {0.00000f, 0.00000f},
                                    {0.00000f, 0.00000f},
                                    {328.27945f, 1.82556f},
                                    {332.22107f, 1.64300f}
                            },
                            {
                                    {0.00000f, 0.00000f},
                                    {0.00000f, 0.00000f},
                                    {0.00000f, 0.00000f},
                                    {340.85504f, 352.51520f}
                            },
                            {
                                    {0.00000f, 0.00000f},
                                    {0.00000f, 0.00000f},
                                    {0.00000f, 0.00000f},
                                    {340.85504f, 352.51520f}
                            },
                    };

            float[][][] plotRotation = new float[][][]
                    {
                            {
                                    {357.37225f, 44.54361f},
                                    {357.37225f, 44.54361f},
                                    {357.37225f, 44.54361f},
                                    {357.37225f, 44.54361f}
                            },
                            {
                                    {357.37225f, 44.54361f},
                                    {357.37225f, 44.54361f},
                                    {357.37225f, 44.54361f},
                                    {357.37225f, 44.54361f}
                            },
                            {
                                    {357.37225f, 44.54361f},
                                    {357.37225f, 44.54361f},
                                    {357.37225f, 44.54361f},
                                    {357.37225f, 44.54361f},
                            },
                            {
                                    {357.37225f, 44.54361f},
                                    {357.37225f, 44.54361f},
                                    {357.37225f, 44.54361f},
                                    {357.37225f, 44.54361f},
                            },
                    };


            PCsDataContainer.TrialPCs trialPCs = PCs._PCs[alphaIDX[scenario]][1]._trialPCs[t[scenario]];

            System.out.print("DM weights = ");
            PrintUtils.printVectorOfDoubles(trialPCs._dmW, 2);

            // Create plot 3D
            Plot3D plot3D = Plot3DFactory.getPlot(
                    WhiteScheme.getForPlot3D(),
                    "w1", "w2", "w3",
                    DRMPFactory.getFor3D(1.0d, 1.0d, 1.0d),
                    5, 5, 5,
                    "0.00", "0.00", "0.00",
                    2.0f, 2.0f, scheme ->
                            scheme._colors.put(ColorFields.PLOT_BACKGROUND, Color.WHITE),
                    null, null);

            int plotSize = 1000;
            Frame frame = new Frame(plot3D, plotSize, plotSize);
            plot3D.getModel().notifyDisplayRangesChangedListeners();

            float[][] dmWms = new float[][]
                    {{0.04f, 0.04f, 0.02f, 0.01f},
                            {0.04f, 0.04f, 0.02f, 0.01f},
                            {0.04f, 0.04f, 0.03f, 0.03f},
                            {0.04f, 0.04f, 0.03f, 0.03f}};

            // create reference data sets
            ArrayList<IDataSet> dataSets = new ArrayList<>();
            dataSets.add(ReferenceParetoFront.getFlat3DPF("Weight space", 1.0f, 30, new MarkerStyle(0.01f,
                    color.gradient.Color.GRAY_50, Marker.SPHERE_HIGH_POLY_3D)));
            dataSets.add(DSFactory3D.getDS("DM's weight vector",
                    new double[][]{trialPCs._dmW.clone()},
                    new MarkerStyle(0.04f, color.gradient.Color.BLACK, Marker.SPHERE_HIGH_POLY_3D)));
            dataSets.add(DSFactory3D.getReferenceDS("Sampled weight vectors", new MarkerStyle(0.015f,
                    ColorPalettes.getFromDefaultPalette(0), Marker.SPHERE_HIGH_POLY_3D)));
            plot3D.getModel().setDataSets(dataSets);
            frame.setVisible(true);

            // Instantiate DM's model
            IPreferenceModel<LNorm> model = new model.definitions.LNorm(new LNorm(trialPCs._dmW.clone(), alphas[scenario]));

            // Instantiate ERS
            ERS<LNorm> ers = ERSFactory.getDefaultForLNorms(100, new Constant(50000),
                    3, alphas[scenario], null, new LNormOnSimplex(alphas[scenario], 0.2d, 0.2d),
                    new Tournament<>(2), null);

            FRS.Params<LNorm> pFRS = new FRS.Params<>(new LNormGenerator(3, alphas[scenario], null));
            pFRS._feasibleSamplesToGenerate = 100;
            pFRS._samplingLimit = 1000000;
            pFRS._inconsistencyThreshold = 99;
            FRS<LNorm> frs = new FRS<>(pFRS);

            Criteria criteria = Criteria.constructCriteria("C", 3, false);
            IRandom R = new MersenneTwister64(0);

            float[][] ms = new float[][]{
                    {0.04f, 0.03f, 0.005f, 0.003f},
                    {0.04f, 0.03f, 0.005f, 0.003f},
                    {0.04f, 0.035f, 0.03f, 0.02f},
                    {0.04f, 0.035f, 0.03f, 0.02f}
            };

            // Perform simulation
            for (int h = 0; h < 4; h++)
            {
                System.out.println("h = " + h);

                // Set projection:
                plot3D.getModel().updateCameraTranslation(translation[scenario][h][0], translation[scenario][h][1], translation[scenario][h][2]);
                plot3D.getModel().updateCameraRotation(cameraRotation[scenario][h][0], cameraRotation[scenario][h][1]);
                plot3D.getModel().updatePlotRotation(plotRotation[scenario][h][0], plotRotation[scenario][h][1]);

                // Create DM context
                DMContext context = new DMContext(criteria, LocalDateTime.now(), null, null,
                        false, h, new StandardLinearBuilder(), R);

                // Parse feedback
                LinkedList<PreferenceInformationWrapper> preferenceInformation = new LinkedList<>();
                for (int pc = 0; pc <= h; pc++)
                {
                    Alternative A1 = new Alternative("A1", trialPCs._referenceEvaluations[pc][0]);
                    Alternative A2 = new Alternative("A2", trialPCs._referenceEvaluations[pc][1]);
                    double e1 = model.evaluate(A1);
                    double e2 = model.evaluate(A2);

                    if (Double.compare(e1, e2) < 0)
                        preferenceInformation.add(PreferenceInformationWrapper.getTestInstance(PairwiseComparison.getPreference(A1, A2)));
                    else
                        preferenceInformation.add(PreferenceInformationWrapper.getTestInstance(PairwiseComparison.getPreference(A2, A1)));
                }

                ArrayList<IDataSet> forUpdate = new ArrayList<>();


                System.out.println("Updating");

                if (useERS[scenario])
                {
                    ers.registerDecisionMakingContext(context);
                    Report<LNorm> report = (Report<LNorm>) ers.constructModels(preferenceInformation);
                    ers.unregisterDecisionMakingContext();

                    // parse as samples
                    assert !report._inconsistencyDetected;

                    ArrayList<LNorm> cModels = ers.getModelsQueue().getCompatibleModels();
                    double[][] data = new double[cModels.size()][];
                    for (int i = 0; i < cModels.size(); i++) data[i] = cModels.get(i).getWeights();
                    forUpdate.add(DSFactory3D.getDS("Sampled weight vectors", data, new MarkerStyle(ms[scenario][h],
                            ColorPalettes.getFromDefaultPalette(0), Marker.SPHERE_HIGH_POLY_3D)));
                }
                else
                {
                    frs.registerDecisionMakingContext(context);
                    model.constructor.Report<LNorm> report = frs.constructModels(preferenceInformation);
                    frs.unregisterDecisionMakingContext();

                    // parse as samples
                    assert !report._inconsistencyDetected;

                    double[][] data = new double[report._models.size()][];
                    for (int i = 0; i < report._models.size(); i++) data[i] = report._models.get(i).getWeights();
                    forUpdate.add(DSFactory3D.getDS("Sampled weight vectors", data, new MarkerStyle(ms[scenario][h],
                            ColorPalettes.getFromDefaultPalette(0), Marker.SPHERE_HIGH_POLY_3D)));

                }

                forUpdate.add(DSFactory3D.getDS("DM's weight vector",
                        new double[][]{trialPCs._dmW.clone()},
                        new MarkerStyle(dmWms[scenario][h], color.gradient.Color.BLACK, Marker.SPHERE_HIGH_POLY_3D)));

                plot3D.getModel().updateSelectedDataSets(forUpdate);
                Thread.sleep(1000);

                // generate screenshot

                Screenshot screenshot = plot3D.getModel().requestScreenshotCreation(plotSize, plotSize, false);
                screenshot._barrier.await();
                path = FileUtils.getPathRelatedToClass(IllustrateModels.class, "Projects", "src", File.separatorChar);
                String outputFile = path + File.separator + saveFilename[scenario] + "_" + h;
                ImageSaver.saveImage(screenshot._image, outputFile, "jpg", 1.0f);
            }

        } catch (Exception e)
        {
            throw new RuntimeException(e);
        }

    }
}
